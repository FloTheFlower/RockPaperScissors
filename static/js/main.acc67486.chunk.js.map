{"version":3,"sources":["logo.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","games","idx","gamesPlayed","gamesWon","createNewGame","bind","e","console","log","game","key","this","setState","push","className","src","logo","alt","onClick","React","Component","Stats","rate","roundedRate","Math","round","Number","EPSILON","Game","played","status","playerMove","oponentMove","rock","paper","scissors","playGame","reset","randNr","floor","random","chooseRandomAction","choseWinner","stat","statusCodeToText","op","resetBtn","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.acc67486.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.86a2b440.jpg\";","import React from 'react';\nimport logo from './logo.jpg';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      games: [],\n      idx: 0, \n      gamesPlayed: 0,\n      gamesWon: 0\n    };\n\n    this.createNewGame = this.createNewGame.bind(this);\n\n  }\n\n\nhandleGameUpdate(e) {\n\n}\n\n\ncreateNewGame(){\n  console.log(\"Creating New Game!\")\n\n  let game = <li key={this.state.idx}>\n    \n  \n     <Game/> </li>;\n\n  this.setState((state, props) => {\n    console.log(this.state.idx)\n    state.games.push(game);\n    return {\n      games: state.games, \n      idx: state.idx + 1\n    }\n  })\n\n}\n\nrender () {\n  return <div className=\"entireapp\">\n    <div className=\"column\">\n    <div className=\"headline\">\n  <h1>Rock Paper Scissors with React</h1>\n  </div>\n  <div>\n     <img className=\"image\" src={logo} alt=\"logo\" />\n     </div>\n  \n  </div>\n  <Stats gamesPlayed={this.state.gamesPlayed} \n  \n  gamesWon={this.state.gamesWon} />\n  <ul>  \n   \n    {this.state.games} \n    \n  </ul>\n  <button className=\"space\" onClick={this.createNewGame}> New Game</button>\n  </div>\n}\n}\n\n\nclass Stats extends React.Component{\n  render() {\n    let rate = this.props.gamesPlayed ? this.props.gamesWon / this.props.gamesPlayed : 0;\n\n    let roundedRate = Math.round((rate+ Number.EPSILON) * 100) / 180;\n    return <div className=\"space\"> \n    <span>Games Played   {this.props.gamesPlayed}:      | Games won:    {this.props.gamesWon}   | Win rate: {roundedRate} </span> \n    \n    </div>\n  }\n}\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      played: false, \n      status: null, \n      playerMove: null, \n      oponentMove: null\n    };\n    this.rock = this.rock.bind(this);\n    this.paper = this.paper.bind(this);\n    this.scissors = this.scissors.bind(this);\n    this.playGame = this.playGame.bind(this);\n    this.reset  = this.reset.bind(this);\n  }\n\n\n  playGame(playerMove){\n    if(! this.state.played) {\n      let oponentMove = chooseRandomAction();\n      let status = choseWinner(playerMove, oponentMove);\n      this.setState({\n        played: true, \n        status: status, \n        playerMove: playerMove,\n        oponentMove: oponentMove\n       } )\n    }\n  }\n\n  rock () {\n    console.log(\"Rock chosen\");\n    this.playGame(\"Rock\");\n  }\n\n  paper() {\n    console.log(\"paper chosen\")\n    this.playGame(\"Paper\");\n  }\n\n  scissors() {\n    console.log(\"Scissors chosen\")\n    this.playGame(\"Scissors\");\n  }\n\n  reset() {\n    console.log(\"Resetting game\")\n    this.setState({\n      played: false\n\n    })\n  }\n\n  render() {\n    let stat = this.state.played ? statusCodeToText(this.state.status) : \" \" ;\n    let op = this.state.played ? this.state.oponentMove : \" \";\n\n    let resetBtn = this.state.played ? <button onClick={this.reset}> Reset </button> : null;\n\n\n    return <div className=\"space\">\n      <div className=\"buttons\">\n      <button className = \"buttonspace\" onClick={this.rock}> Rock </button>\n      <button className = \"buttonspace\" onClick={this.paper}> Paper </button>\n      <button className = \"buttonspace\" onClick={this.scissors}> Scissors </button>\n      </div> \n      <div className=\"space\">\n      <span className=\"gamestatus\">Game status: {stat} </span>\n      </div>\n      <div className=\"space\">\n      <span className=\"gamestatus\">Player Choice: {this.state.playerMove} </span>\n      </div>\n      <div className=\"space\">\n      <span className=\"gamestatus\">Oponent Choice: {op}</span>\n     \n    <div className=\"space\">\n    {resetBtn}\n      </div> \n      </div>\n    </div>    \n  }\n}\n\n\n\nfunction chooseRandomAction(){\n\n  let moves = [\"Rock\", \"Paper\", \"Scissors\"];\n  let randNr =Math.floor(Math.random() * 3);\n  let randMove = moves[randNr];\n  return randMove;\n}\n\n\nfunction choseWinner(playerMove, oponentMove){\nif (playerMove === oponentMove) return 0;\n\n\nif (playerMove === \"Rock\") {\n  if (oponentMove === 'Paper') return -1;  //lost \n  if (oponentMove === 'Scissors') return 1; //won \n}\n\nif (playerMove === \"Paper\") {\n  if (oponentMove === 'Rock') return 1;  //won \n  if (oponentMove === 'Scissors') return -1;  //lost\n}\n\nif (playerMove === \"Scissors\") {\n  if (oponentMove === 'Paper') return 1;\n  if (oponentMove === 'Rock') return -1;\n}\n  \n}\n\nfunction statusCodeToText (status) {\nif (status === -1) return \"Loss\";\nif (status === 0) return \"Draw\";\nif (status === 1 ) return \"Won\";\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}